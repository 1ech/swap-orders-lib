[{"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/constants/index.ts":"1","/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/index.ts":"2","/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/limit-orders/index.ts":"3","/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/types/index.ts":"4","/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/utils/index.ts":"5","/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/utils/queries/constants.ts":"6","/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/utils/queries/index.ts":"7","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/constants/index.ts":"8","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/index.ts":"9","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/limit-orders/index.ts":"10","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/types/index.ts":"11","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/utils/index.ts":"12","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/utils/queries/constants.ts":"13","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/utils/queries/index.ts":"14"},{"size":6461,"mtime":1637273950183,"results":"15","hashOfConfig":"16"},{"size":199,"mtime":1637263741861,"results":"17","hashOfConfig":"16"},{"size":22071,"mtime":1637273951545,"results":"18","hashOfConfig":"16"},{"size":1681,"mtime":1637263741862,"results":"19","hashOfConfig":"16"},{"size":487,"mtime":1637263716617,"results":"20","hashOfConfig":"16"},{"size":4305,"mtime":1637263741862,"results":"21","hashOfConfig":"16"},{"size":7518,"mtime":1637273951764,"results":"22","hashOfConfig":"16"},{"size":5989,"mtime":1637529071645,"results":"23","hashOfConfig":"24"},{"size":139,"mtime":1637529071656,"results":"25","hashOfConfig":"24"},{"size":22071,"mtime":1637529071656,"results":"26","hashOfConfig":"24"},{"size":1557,"mtime":1637529071657,"results":"27","hashOfConfig":"24"},{"size":487,"mtime":1637529071657,"results":"28","hashOfConfig":"24"},{"size":3628,"mtime":1637529071658,"results":"29","hashOfConfig":"24"},{"size":5607,"mtime":1637529071658,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kl2elf",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yn6tx2",{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/constants/index.ts",[],"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/index.ts",[],"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/limit-orders/index.ts",[],"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/types/index.ts",[],"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/utils/index.ts",[],"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/utils/queries/constants.ts",[],"/home/0mkar/Karma/limit-orders-lib/packages/limit-orders-lib/src/utils/queries/index.ts",["60"],"import { request } from \"graphql-request\";\nimport {\n  OLD_SUBGRAPH_URL,\n  SUBGRAPH_URL,\n  STOP_LIMIT_ORDER_SUBGRAPH_URL,\n  GELATO_STOPLOSS_ORDERS_MODULE_ADDRESS,\n  GELATO_LIMIT_ORDERS_MODULE_ADDRESS,\n} from \"../../constants\";\nimport { Order, StopLimitOrder } from \"../../types\";\nimport {\n  GET_ALL_ORDERS_BY_OWNER,\n  GET_ORDER_BY_ID,\n  GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,\n} from \"./constants\";\n\nexport const queryOrder = async (\n  orderId: string,\n  chainId: number\n): Promise<Order | null> => {\n  try {\n    const dataFromOldSubgraph = OLD_SUBGRAPH_URL[chainId]\n      ? await request(OLD_SUBGRAPH_URL[chainId], GET_ORDER_BY_ID, {\n          id: orderId.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const dataFromNewSubgraph = SUBGRAPH_URL[chainId]\n      ? await request(SUBGRAPH_URL[chainId], GET_ORDER_BY_ID, {\n          id: orderId.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const allOrders = [\n      ...dataFromOldSubgraph.orders,\n      ...dataFromNewSubgraph.orders,\n    ];\n\n    return _getUniqueOrdersWithHandler(allOrders).pop() ?? null;\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for all orders\");\n  }\n};\n\nexport const queryOrders = async (\n  owner: string,\n  chainId: number\n): Promise<Order[]> => {\n  try {\n    const dataFromOldSubgraph = OLD_SUBGRAPH_URL[chainId]\n      ? await request(OLD_SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const dataFromNewSubgraph = SUBGRAPH_URL[chainId]\n      ? await request(SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const allOrders = [\n      ...dataFromOldSubgraph.orders,\n      ...dataFromNewSubgraph.orders,\n    ];\n\n    return _getUniqueOrdersWithHandler(allOrders);\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for all orders\");\n  }\n};\n\nexport const queryStopLimitOrders = async (\n  owner: string,\n  chainId: number\n): Promise<Order[]> => {\n  try {\n    const dataStopLimitSubgraph = STOP_LIMIT_ORDER_SUBGRAPH_URL[chainId]\n      ? await request(\n          STOP_LIMIT_ORDER_SUBGRAPH_URL[chainId],\n          GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,\n          {\n            owner: owner.toLowerCase(),\n            module: STOP_LIMIT_ORDER_SUBGRAPH_URL[chainId].toLowerCase(),\n          }\n        )\n      : { orders: [] };\n\n    const orders = dataStopLimitSubgraph.orders;\n\n    return _getUniqueOrdersWithHandler(orders);\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for all orders\");\n  }\n};\n\nexport const queryOpenStopLimitOrders = async (\n  owner: string,\n  chainId: number\n): Promise<Order[]> => {\n  try {\n    const dataStopLimitSubgraph = STOP_LIMIT_ORDER_SUBGRAPH_URL[chainId]\n      ? await request(\n          STOP_LIMIT_ORDER_SUBGRAPH_URL[chainId],\n          GET_ALL_STOP_LIMIT_ORDERS_BY_OWNER,\n          {\n            owner: owner.toLowerCase(),\n            module: STOP_LIMIT_ORDER_SUBGRAPH_URL[chainId].toLowerCase(),\n          }\n        )\n      : { orders: [] };\n\n    const orders = dataStopLimitSubgraph.orders;\n\n    return _getUniqueOrdersWithHandler(orders).filter(\n      (order) => order.status === \"open\"\n    );\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for open orders\");\n  }\n};\n\nexport const queryOpenOrders = async (\n  owner: string,\n  chainId: number\n): Promise<Order[] | StopLimitOrder[]> => {\n  try {\n    const dataFromOldSubgraph = OLD_SUBGRAPH_URL[chainId]\n      ? await request(OLD_SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n          module: GELATO_STOPLOSS_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n        })\n      : { orders: [] };\n\n    const dataFromNewSubgraph = SUBGRAPH_URL[chainId]\n      ? await request(SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n          module: GELATO_STOPLOSS_ORDERS_MODULE_ADDRESS[chainId].toLowerCase(),\n        })\n      : { orders: [] };\n\n    const allOrders = [\n      ...dataFromOldSubgraph.orders,\n      ...dataFromNewSubgraph.orders,\n    ];\n\n    // allOrders.filter(i => i.module !== GELATO_STOPLOSS_ORDERS_MODULE_ADDRESS[chainId].toLowerCase())\n\n    return _getUniqueOrdersWithHandler(allOrders).filter(\n      (order) => order.status === \"open\"\n    );\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for open orders\");\n  }\n};\n\nexport const queryPastOrders = async (\n  owner: string,\n  chainId: number\n): Promise<Order[] | StopLimitOrder[]> => {\n  try {\n    const dataFromOldSubgraph = OLD_SUBGRAPH_URL[chainId]\n      ? await request(OLD_SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const dataFromNewSubgraph = SUBGRAPH_URL[chainId]\n      ? await request(SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const allOrders = [\n      ...dataFromOldSubgraph.orders,\n      ...dataFromNewSubgraph.orders,\n    ];\n\n    return _getUniqueOrdersWithHandler(allOrders).filter(\n      (order) => order.status !== \"open\"\n    );\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for past orders\");\n  }\n};\n\nexport const queryExecutedOrders = async (\n  owner: string,\n  chainId: number\n): Promise<Order[] | StopLimitOrder[]> => {\n  try {\n    const dataFromOldSubgraph = OLD_SUBGRAPH_URL[chainId]\n      ? await request(OLD_SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const dataFromNewSubgraph = SUBGRAPH_URL[chainId]\n      ? await request(SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const allOrders = [\n      ...dataFromOldSubgraph.orders,\n      ...dataFromNewSubgraph.orders,\n    ];\n\n    return _getUniqueOrdersWithHandler(allOrders).filter(\n      (order) => order.status === \"executed\"\n    );\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for executed orders\");\n  }\n};\n\nexport const queryCancelledOrders = async (\n  owner: string,\n  chainId: number\n): Promise<Order[] | StopLimitOrder[]> => {\n  try {\n    const dataFromOldSubgraph = OLD_SUBGRAPH_URL[chainId]\n      ? await request(OLD_SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const dataFromNewSubgraph = SUBGRAPH_URL[chainId]\n      ? await request(SUBGRAPH_URL[chainId], GET_ALL_ORDERS_BY_OWNER, {\n          owner: owner.toLowerCase(),\n        })\n      : { orders: [] };\n\n    const allOrders = [\n      ...dataFromOldSubgraph.orders,\n      ...dataFromNewSubgraph.orders,\n    ];\n\n    return _getUniqueOrdersWithHandler(allOrders).filter(\n      (order) => order.status === \"cancelled\"\n    );\n  } catch (error) {\n    throw new Error(\"Could not query subgraph for cancelled orders\");\n  }\n};\n\nconst _getUniqueOrdersWithHandler = (allOrders: Order[]): Order[] =>\n  [...new Map(allOrders.map((order) => [order.id, order])).values()]\n    // sort by `updatedAt` asc so that the most recent one will be used\n    .sort((a, b) => parseFloat(a.updatedAt) - parseFloat(b.updatedAt))\n    .map((order) => {\n      let handler;\n      try {\n        const hasHandler = order.data.length === 194;\n        handler = hasHandler ? \"0x\" + order.data.substr(154, 194) : null;\n      } catch (e) {\n        handler = null;\n      }\n\n      return { ...order, handler };\n    });\n","/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/constants/index.ts",[],"/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/index.ts",[],"/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/limit-orders/index.ts",[],"/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/types/index.ts",[],"/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/utils/index.ts",[],"/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/utils/queries/constants.ts",[],"/home/0mkar/Karma/orders-lib/packages/limit-orders-lib/src/utils/queries/index.ts",[],{"ruleId":"61","severity":1,"message":"62","line":7,"column":3,"nodeType":"63","messageId":"64","endLine":7,"endColumn":37},"@typescript-eslint/no-unused-vars","'GELATO_LIMIT_ORDERS_MODULE_ADDRESS' is defined but never used.","Identifier","unusedVar"]